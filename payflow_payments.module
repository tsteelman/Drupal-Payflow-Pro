<?php
/**
 * Payflow pro Payment module.
 *
 * Processes Payflow pro Payments.
 *
 */
/**
 * @file
 * A block module that displays recent blog and forum posts.
 */

define('PAYPAL_TXN_MODE_LIVE', 'live');
define('PAYPAL_TXN_MODE_TEST', 'test');

function payflow_payments_help($path, $arg) {
	switch ($path) {
		case "admin/help#payflow_payments":
			return '<p>' . t("Displays links to nodes created on this date") . '</p>';
			break;
	}
}

/**
 * Implements hook_block_info().
 */
function payflow_payments_block_info() {
	$blocks['payflow_payments'] = array(
			// The name that will appear in the block list.
			'info' => t('Payflow Payments'),
			// Default setting.
			'cache' => DRUPAL_CACHE_PER_ROLE,
	);
	return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function payflow_payments_block_view($delta = '') {
	switch ($delta) {
		case 'payflow_payments':
			$block['subject'] = t('Payflow Payment');
			$block['content'] = drupal_get_form('payflow_payments_form');
			/*
			if (user_access('access content')) {
				// Use our custom function to retrieve data.
				$result = payflow_payments_contents();
				// Array to contain items for the block to render.
				$items = array();
				// Iterate over the resultset and format as links.
				foreach ($result as $node) {
					$items[] = array(
							'data' => l($node->title, 'node/' . $node->nid),
					);
				}
				// No content in the last week.
				if (empty($items)) {
					$block['content'] = t('No posts available.');
				}
				else {
					// Pass data through theme function.
					$block['content'] = theme('item_list', array(
							'items' => $items));
				}
			}
			*/
			return $block;
	}

}

/**
 * Implements hook_menu().
 */
function payflow_payments_menu() {
	$items = array();

	$items['admin/config/content/payflow_payments'] = array(
			'title' => 'Payflow Payments',
			'description' => 'Configuration for Payflow Payments module',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('payflow_payments_configuration_form'),
			'access arguments' => array('access administration pages'),
			'type' => MENU_NORMAL_ITEM,
	);
	
	$items['examples/form-example'] = array( //this creates a URL that will call this form at "examples/form-example"
			'title' => 'Example Form', //page title
			'description' => 'A form to mess around with.',
			'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
			'page arguments' => array('payflow_payments_form'), //put the name of the form here
			'access callback' => TRUE
	);
	

	return $items;
}
/**
 * Implements Payflow form
 * @param $form
 * @param $form_state
 * @return $form
 */
function payflow_payments_configuration_form($form, &$form_state) {
	
	$form['payflow_payments_type'] = array(
			'#type' => 'select',
			'#title' => t('Live/Test'),
			'#options' => array(
					PAYPAL_TXN_MODE_LIVE => t(PAYPAL_TXN_MODE_LIVE),
					PAYPAL_TXN_MODE_TEST => t(PAYPAL_TXN_MODE_TEST),
			),
			'#default_value' => variable_get('payflow_payments_type', 'test'),
			'#description' => t('Set this to <em>live</em> for live transactions'),
	);
	
	$form['payflow_payments_vendor'] = array(
			'#type' => 'textfield',
			'#title' => t('Payflow Pro Vendor'),
			'#default_value' => variable_get('payflow_payments_vendor', 'vendor'),
			'#size' => 30,
			'#maxlength' => 30,
			'#description' => t('Vendor for Payflow Pro.'),
			'#required' => TRUE,
	);
	
	$form['payflow_payments_partner'] = array(
			'#type' => 'textfield',
			'#title' => t('Payflow Pro Partner'),
			'#default_value' => variable_get('payflow_payments_partner', 'partner'),
			'#size' => 30,
			'#maxlength' => 30,
			'#description' => t('Vendor for Payflow Pro.'),
			'#required' => TRUE,
	);
	
	$form['payflow_payments_username'] = array(
			'#type' => 'textfield',
			'#title' => t('Payflow Pro User name'),
			'#default_value' => variable_get('payflow_payments_username', 'user'),
			'#size' => 30,
			'#maxlength' => 30,
			'#description' => t('Username for Payflow Pro.'),
			'#required' => TRUE,
	);
	
	$form['payflow_payments_password'] = array(
			'#type' => 'password',
			'#title' => t('Payflow Pro User password'),
			'#default_value' => variable_get('payflow_payments_password', 'password'),
			'#size' => 30,
			'#maxlength' => 30,
			'#description' => t('User password for Payflow Pro.'),
			'#required' => FALSE,
	);

	return system_settings_form($form);
}

function payflow_payments_configuration_form_validate($form, &$form_state) {
	$password = $form_state['values']['payflow_payments_password'];
	if(strlen($password)>0 && strlen($password)<3) {
		form_set_error('payflow_payments_password', t('Password must be greater than 3 characters.'));
	}
}

function payflow_payments_form($form, &$form_state) {

	$form['payflow_payments_name'] = array(
			'#type' => 'textfield',
			'#title' => t('Card holders name'),
			'#size' => 50,
			'#maxlength' => 100,
			'#required' => TRUE,
	);
	
	$form['payflow_payments_cc_number'] = array(
			'#type' => 'textfield',
			'#title' => t('Credit Card #'),
			'#size' => 50,
			'#maxlength' => 30,
			'#required' => TRUE,
	);
	
	$form['payflow_payments_amount'] = array(
			'#type' => 'textfield',
			'#title' => t('Amount'),
			'#size' => 50,
			'#maxlength' => 30,
			'#required' => TRUE,
	);
	
	$months = array(
     1 => "January",
     2 => "February",
     3 => "March",
     4 => "April",
     5 => "May",
     6 => "June",
     7 => "July",
     8 => "August",
     9 => "September",
    10 => "October",
    11 => "November",
    12 => "December"
	);
	
	$years = array();
	$current_year = date("Y");
	for($i=$current_year-5; $i<$current_year+5; $i++) {
		$years[] = $i;
	}
	$form['payflow_payments_expiration_month'] = array(
			'#type' => 'select',
			'#title' => t('Exp. Month'),
			'#options' => $months,
			'#required' => TRUE,
	);
	
	$form['payflow_payments_expiration_year'] = array(
			'#type' => 'select',
			'#title' => t('Exp. Year'),
			'#options' => $years,
			'#required' => TRUE,
	);
	
	$form['payflow_payments_comment1'] = array(
			'#type' => 'textfield',
			'#title' => t('Comment 1'),
			'#size' => 50,
			'#maxlength' => 100,
			'#required' => TRUE,
	);
	
	$form['payflow_payments_comment2'] = array(
			'#type' => 'textfield',
			'#title' => t('Comment 2'),
			'#size' => 50,
			'#maxlength' => 100,
			'#required' => TRUE,
	);
	
	$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Submit Payment'),
	);

	return $form;
}

function payflow_payments_form_validate($form, &$form_state) {
	$name = $form_state['values']['payflow_payments_name'];
	$cc_number = $form_state['values']['payflow_payments_cc_number'];
	$amount = $form_state['values']['payflow_payments_amount'];
	$comment1 = $form_state['values']['payflow_payments_comment1'];
	$comment2 = $form_state['values']['payflow_payments_comment2'];
	
	if(strlen($name)<5) {
		form_set_error('payflow_payments_name', t('Card holders name must me greater than 5 characters'));
	}
	
	if(!payflow_payments_luhn_check($cc_number)) {
		form_set_error('payflow_payments_cc_number', t('Credit Card # is not valid.'));
	}
	
	if(!is_numeric($amount)) {
		form_set_error('payflow_payments_amount', t('Amount is not a valid number.'));
	}
	
	if(strlen($comment1)<3) {
		form_set_error('payflow_payments_name', t('Comment 1 must me greater than 3 characters'));
	}
	
	if(strlen($comment2)<3) {
		form_set_error('payflow_payments_name', t('Card holders name must me greater than 3 characters'));
	}
	
}

function payflow_payments_form_submit($form, &$form_state) {
	$error = false;
	
	//Get Admin settings
	$type =  variable_get('payflow_payments_type', null);
	$username = variable_get('payflow_payments_username', null);
	$password = variable_get('payflow_payments_password', null);
	$partner = variable_get('payflow_payments_partner', null);
	$vendor = variable_get('payflow_payments_vendor', null);
	
	//Get form values
	$name = $form_state['values']['payflow_payments_name'];
	$cc_number = $form_state['values']['payflow_payments_cc_number'];
	$amount = $form_state['values']['payflow_payments_amount'];
	$exp_month = $form_state['values']['payflow_payments_expiration_month'];
	$exp_year = $form_state['values']['payflow_payments_expiration_year'];
	$comment1 = $form_state['values']['payflow_payments_comment1'];
	$comment2 = $form_state['values']['payflow_payments_comment2'];
	
	//Validate the server settings are set 
	if(strlen($type) ==0 ) {
		drupal_set_message(t('No Payflow pro transaction server is set. Please check admin settings '), 'error');
		$error = true;
	}
	
	if(strlen($username) ==0 ) {
		drupal_set_message(t('No Payflow pro user name is set. Please check admin settings '), 'error');
		$error = true;
	}
	
	if(strlen($password) ==0 ) {
		drupal_set_message(t('No Payflow password is set. Please check admin settings '), 'error');
		$error = true;
	}
	
	if(strlen($partner) ==0 ) {
		drupal_set_message(t('No Payflow partner is set. Please check admin settings '), 'error');
		$error = true;
	}
	
	if(strlen($vendor) ==0 ) {
		drupal_set_message(t('No Payflow vendor is set. Please check admin settings '), 'error');
		$error = true;
	}
	
	if($error) {
		return;
	}
	
	//Create array to send to payflow pro
	// Build a name-value pair array for this transaction.
	$request = array(
			// User name taken from admin config
			'USER' => $username,
			// Password taken frmo admin config
			'PWD' => $password,
			// Partner taken from admin config
			'PARTNER' => $partner,
			// Vendor taken from admin config
			'VENDOR' => $vendor,
			// Verbose setting
			'VERBOSITY' => 'MEDIUM',
			// A - Authorize, S - Auth and Capture
			'TRXTYPE' => 'S',
			// C - Credit card
			'TENDER'  => 'C',
			// The total price
			'AMT' => number_format($amount, 2, '.', ''),
			// The currency code
			'CURRENCY' => 'USD',
			// The credit card number
			'ACCT'    => $cc_number,
			// The expiration date, in format 'mmyy'
			'EXPDATE' => $exp_month.$exp_year,
			// Comment 1
			'COMMENT1' => $comment1,
			//Comment 2 
			'COMMENT2' => $comment2
			// The order number
			//'INVNUM' => $order->order_number,
	);

	// Get the API endpoint URL for the method's transaction mode.
	$url = payflow_payments_pro_server_url($type);
	
	// Prepare the name-value pair array to be sent as a string.
	$pairs = array();
	foreach ($request as $key => $value) {
		$pairs[] = $key . '=' . $value;
	}
	
	// Setup the cURL request.
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_VERBOSE, 0);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
	curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
	$result = curl_exec($ch);
	
	// Log any errors to the watchdog.
	if ($error = curl_error($ch)) {
		//DO SOMETHING
		return FALSE;
	}
	curl_close($ch);
	
	// Make the response an array and trim off the encapsulating characters.
	$response = explode('&', $result);
	
	$return = array();
	for ($i = 0; $i < count($response); $i++) {
		$kv = explode('=', $response[$i]);
		$return[$kv[0]] = $kv[1];
	}
	
	if($return['RESULT'] == 1 ) {
		drupal_set_message(t($return['RESPMSG']), 'error');
		return;
	}
}

function  payflow_payments_pro_server_url($txn_mode) {
	switch ($txn_mode) {
		case PAYPAL_TXN_MODE_LIVE:
			return 'https://payflowpro.paypal.com';
		case PAYPAL_TXN_MODE_TEST:
			return 'https://pilot-payflowpro.paypal.com';
	}
}

/* Luhn algorithm number checker - (c) 2005-2008 shaman - www.planzero.org *
 * This code has been released into the public domain, however please      *
 * give credit to the original author where possible.                      */

function  payflow_payments_luhn_check($number) {

	// Strip any non-digits (useful for credit card numbers with spaces and hyphens)
	$number=preg_replace('/\D/', '', $number);

	// Set the string length and parity
	$number_length=strlen($number);
	$parity=$number_length % 2;

	// Loop through each digit and do the maths
	$total=0;
	for ($i=0; $i<$number_length; $i++) {
		$digit=$number[$i];
		// Multiply alternate digits by two
		if ($i % 2 == $parity) {
			$digit*=2;
			// If the sum is two digits, add them together (in effect)
			if ($digit > 9) {
				$digit-=9;
			}
		}
		// Total up the digits
		$total+=$digit;
	}

	// If the total mod 10 equals 0, the number is valid
	return ($total % 10 == 0) ? TRUE : FALSE;

}
